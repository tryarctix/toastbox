(() => {
  const themes = {
    classic: {
      base: "rounded-lg shadow-md bg-white text-black p-4",
      info: "border-l-4 border-blue-500",
      success: "border-l-4 border-green-500",
      error: "border-l-4 border-red-500",
      warning: "border-l-4 border-yellow-500",
      icon: {
        info: "ℹ️",
        success: "✅",
        error: "❌",
        warning: "⚠️"
      }
    },
    dark: {
      base: "rounded-lg shadow-lg bg-gray-900 text-white p-4",
      info: "border-l-4 border-blue-400",
      success: "border-l-4 border-green-400",
      error: "border-l-4 border-red-400",
      warning: "border-l-4 border-yellow-400",
      icon: {
        info: "💡",
        success: "🎉",
        error: "🚫",
        warning: "⛔"
      }
    }
  };

  const positions = {
    "top-right": "top-5 right-5",
    "bottom-right": "bottom-5 right-5",
    "top-center": "top-5 left-1/2 -translate-x-1/2"
  };

  const progressBars = {
    glassline: "bg-white/40 h-1 w-full absolute bottom-0 left-0",
    solid: "bg-blue-500 h-1 w-full absolute bottom-0 left-0",
    gradient: "bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 h-1 w-full absolute bottom-0 left-0",
    default: "bg-white h-1 w-full absolute bottom-0 left-0"
  };

  const animations = {
    slide: ["opacity-0 translate-y-2", "opacity-100 translate-y-0 transition-all duration-300"],
    zoom: ["scale-0", "scale-100 transition-transform duration-300 ease-out"],
    flip: ["rotate-x-90", "rotate-x-0 transition-transform duration-500"]
  };

  const addAnimationStyles = () => {
    const style = document.createElement('style');
    style.id = 'toast-animation-styles';
    style.textContent = `
@keyframes shrink {
  from { transform: scaleX(1); }
  to { transform: scaleX(0); }
}
.toast-progress-animate {
  transform-origin: left;
}
.toast:hover .toast-progress-animate {
  animation-play-state: paused;
}
.toast-exit {
  opacity: 0;
  transform: scale(0.95);
  transition: all 0.2s ease;
}
    `;
    document.head.appendChild(style);
  };

  const createToast = (messageObj, options) => {
    const { message, tags = ["info"] } = messageObj;
    const type = tags[0] || "info";
    const theme = themes[options.theme] || themes.classic || {};
    const base = theme.base || "";
    const variant = theme[type] || "";
    const icon = theme.icon?.[type] || "";

    const toast = document.createElement("div");
    toast.className = `toast ${base} ${variant} overflow-hidden relative ${animations[options.animation]?.[0] || ""}`;

    const msgDiv = document.createElement("div");
    msgDiv.className = "toast-message flex items-center gap-2";
    msgDiv.innerHTML = icon
      ? `<span class="text-xl">${icon}</span><span>${message}</span>`
      : `<span>${message}</span>`;
    toast.appendChild(msgDiv);

    let dismissTimeout;

    if (options.showClose) {
      const closeBtn = document.createElement("button");
      closeBtn.innerHTML = `
        <span class="inline-block w-6 h-6 rounded-full bg-white/20 hover:bg-white/40 text-black flex items-center justify-center font-bold text-sm leading-none transition-all duration-200">
          &times;
        </span>
      `;
      closeBtn.className = "absolute top-2 right-2 z-10 focus:outline-none";
      closeBtn.setAttribute("aria-label", "Close toast");

      closeBtn.onclick = () => {
        clearTimeout(dismissTimeout);
        toast.classList.add("toast-exit");
        setTimeout(() => toast.remove(), 200);
      };

      toast.appendChild(closeBtn);
    }

    let progress = null;
    if (options.showProgress) {
      progress = document.createElement("div");
      const progressClass = progressBars?.[options.progressStyle] ?? progressBars.default;
      progress.className = `toast-progress-animate ${progressClass}`;
      toast.appendChild(progress);
      setTimeout(() => {
        progress.style.animation = `shrink linear ${options.duration}ms forwards`;
      }, 10);
    }

    setTimeout(() => {
      const entry = animations[options.animation]?.[0] || "";
      const exit = animations[options.animation]?.[1] || "";
      toast.classList.remove(...entry.split(" ").filter(Boolean));
      toast.classList.add(...exit.split(" ").filter(Boolean));
    }, 10);

    const startTime = Date.now();
    let remainingTime = options.duration;

    const dismiss = () => {
      toast.classList.add("toast-exit");
      setTimeout(() => toast.remove(), 200);
    };

    dismissTimeout = setTimeout(dismiss, options.duration);

    toast.addEventListener("mouseenter", () => {
      clearTimeout(dismissTimeout);
      if (progress) progress.style.animationPlayState = 'paused';
      remainingTime -= Date.now() - startTime;
    });

    toast.addEventListener("mouseleave", () => {
      if (progress) progress.style.animationPlayState = 'running';
      dismissTimeout = setTimeout(dismiss, remainingTime);
    });

    return toast;
  };

  window.initSuperToasts = function (messages, userOptions = {}) {
    if (!Array.isArray(messages)) return console.error("Messages must be an array");
    if (!messages.length) return console.warn("No messages provided");

    if (!document.getElementById('toast-animation-styles')) {
      addAnimationStyles();
    }

    const defaultOptions = {
      theme: "classic",
      animation: "slide",
      position: "top-right",
      duration: 4000,
      showProgress: true,
      progressStyle: "glassline",
      showClose: true,
      queueMode: "stack"
    };

    const options = { ...defaultOptions, ...userOptions };
    if (!themes[options.theme]) options.theme = "classic";

    messages.forEach(messageObj => {
      const toast = createToast(messageObj, options);
      const cid = "toast-container-" + options.position.replace(/[^a-z]/gi, "");
      let container = document.getElementById(cid);

      if (!container) {
        container = document.createElement("div");
        container.id = cid;
        container.className = `fixed z-50 space-y-3 w-full max-w-xs ${positions[options.position] || ""}`;
        document.body.appendChild(container);
      } else if (options.queueMode === "replace") {
        container.innerHTML = "";
      }

      container.appendChild(toast);
    });
  };

  window.showToast = function (message, type = "info", options = {}) {
    initSuperToasts([{ message, tags: [type] }], options);
  };

  window.clearAllToasts = function () {
    document.querySelectorAll('[id^="toast-container-"]').forEach(el => el.remove());
  };
})();
 
